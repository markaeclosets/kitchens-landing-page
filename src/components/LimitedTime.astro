---

// Astro components don't have state, so we'll use client-side JavaScript for the timer
---

<div class="w-full rounded-xl bg-black p-6 sm:p-8 shadow-lg relative overflow-hidden full-width-bg">
  <section class="container">
      <div class="">
        <div class="absolute inset-0 bg-gradient-to-br from-amber-400/10 to-amber-900/10"></div>
        <div class="relative z-10 flex flex-col sm:flex-row items-center justify-between gap-6">
          <div class="text-center sm:text-left">
            <h2 class="text-2xl sm:text-3xl font-bold text-white mb-2">Limited Time Offer!</h2>
            <p class="text-yellow-400 text-lg sm:text-xl mb-4">Get 20% off on all premium plans</p>
          </div>
          <div class="flex items-center gap-4">
            <div class="bg-yellow-900/50 rounded-lg p-3 text-white text-center">
              <div class="flex items-center justify-center mb-1">
                <!-- <Clock class="w-5 h-5 mr-2 text-yellow-400" /> -->
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clock"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>
                <span class="font-semibold">Deal expires in:</span>
              </div>
              <div class="font-mono text-xl" id="timer">24:00:00</div>
            </div>
            <div class="bg-yellow-400 text-black hover:bg-yellow-500 transition-colors duration-300">
              Get Quote
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-right"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
            </div>
          </div>
        </div>
      </div>
  </section>
</div>

<script>
  function updateTimer() {
    const timerElement = document.getElementById('timer');
    if (!timerElement) return;

    let timeLeft = {
      hours: 24,
      minutes: 0,
      seconds: 0
    };

    const timer = setInterval(() => {
      if (timeLeft.hours === 0 && timeLeft.minutes === 0 && timeLeft.seconds === 0) {
        clearInterval(timer);
        return;
      }

      let newSeconds = timeLeft.seconds - 1;
      let newMinutes = timeLeft.minutes;
      let newHours = timeLeft.hours;

      if (newSeconds < 0) {
        newSeconds = 59;
        newMinutes -= 1;
      }
      if (newMinutes < 0) {
        newMinutes = 59;
        newHours -= 1;
      }

      timeLeft = { hours: newHours, minutes: newMinutes, seconds: newSeconds };
      timerElement.textContent = `${String(timeLeft.hours).padStart(2, '0')}:${String(timeLeft.minutes).padStart(2, '0')}:${String(timeLeft.seconds).padStart(2, '0')}`;
    }, 1000);
  }

  // Run the timer when the component mounts
  updateTimer();
</script>